[*.cs]

#region format editorconfig
guidelines = 172, 190
guidelines_style = 1px dotted white

#Set to tab or space to use hard tabs or soft tabs respectively.
indent_style: space

#A whole number defining the number of columns used for each indentation level and the width of soft tabs (when supported).
indent_size: 4

#Denotes whether whitespace is removed from the end of lines
trim_trailing_whitespace: true

#Denotes whether file should end with a newline
insert_final_newline: true

#Forces hard line wrapping after the amount of characters specified.
max_line_length: 190

#Denotes whether spaces should be present around arithmetic and boolean operators
spaces_around_operators: true
#endregion format editorconfig


#region CSharp formatting rules
#Add new line before open brace
csharp_new_line_before_open_brace = methods, properties, control_blocks, types

#Add new line before else brace
csharp_new_line_before_else = true

#Add new line before catch brace
csharp_new_line_before_catch = true

#Add new line before finally brace
csharp_new_line_before_finally = true

#Add new line before members in object initializers
csharp_new_line_before_members_in_object_initializers = true

#Add new line before members in anonymous types
csharp_new_line_before_members_in_anonymous_types = true

#Add new line between query expression clauses
csharp_new_line_between_query_expression_clauses = true

#Add ident case contents
csharp_indent_case_contents = true

#Add ident case contents
csharp_indent_switch_labels = true

#Add ident case contents
csharp_indent_block_contents = true

#Remove ident case contents
csharp_indent_braces = false

#Add ident case contents
csharp_indent_case_contents_when_block = false

# IDE0063: Use la instrucción "using" simple
csharp_prefer_simple_using_statement = true:none

#Sort System directive first
dotnet_sort_system_directives_first = true

#Place a blank line between using directive groups
dotnet_separate_import_directive_groups = true

#Add space after cast
csharp_space_after_cast = true

#Add space after keywords in control flow statements
csharp_space_after_keywords_in_control_flow_statements = true

#Add space before colon in inheritance clause
csharp_space_before_colon_in_inheritance_clause = true

#Add space after colon in inheritance clause
csharp_space_after_colon_in_inheritance_clause = true

#Add space around binary operators
csharp_space_around_binary_operators = before_and_after

#Remove space around binary operators
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false

#Remove space between method declaration name and open parentheses
csharp_space_between_method_declaration_name_and_open_parenthesis = false

#Remove space between method call parameter list parentheses
csharp_space_between_method_call_parameter_list_parentheses = false

#Remove space between method call parameter list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false

#Remove space between method call name and opening parentheses
csharp_space_between_method_call_name_and_opening_parenthesis = false

#Add space after comma
csharp_space_after_comma = true

#Remove space after comma
csharp_space_before_comma = false

#Remove space after dot
csharp_space_after_dot = false

#Remove space before dot
csharp_space_before_dot = false

#Add space after semicolon in for statement
csharp_space_after_semicolon_in_for_statement = true

#Remove space before semicolon in for statement
csharp_space_before_semicolon_in_for_statement = false

#Remove extra space around declaration statement
csharp_space_around_declaration_statements = false

#Remove space before open square brackets
csharp_space_before_open_square_brackets = false

#Remove space between empty square brackets
csharp_space_between_empty_square_brackets = false

#Remove space between square brackets
csharp_space_between_square_brackets = false

#Preserve single line statements
csharp_preserve_single_line_statements = false

#Using directive placement outside namespace
csharp_using_directive_placement = outside_namespace:warning

#Prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:error

#Prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:warning

#When this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning

#Prefer parentheses to clarify arithmetic operator (*, /, %, +, -, <<, >>, &, ^, |) precedence
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning

#Prefer parentheses to clarify relational operator (>, <, <=, >=, is, as, ==, !=) precedence
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

#Prefer parentheses to clarify other binary operator (&&, ||, ??) precedence
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning

#IDE0029 and IDE0030 Prefer null coalescing expressions to ternary operator checking
dotnet_style_coalesce_expression = true:error

#IDE0031 Prefer to use null-conditional operator when possible
dotnet_style_null_propagation = true:error

#Prefer is null check over reference equality method
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

#Prefer to use throw expressions instead of throw statements
csharp_style_throw_expression = true:warning

#Prefer to use 'not' pattern, when possible (introduced with C# 9.0)
csharp_style_prefer_not_pattern = true:error

#Prefer braces
csharp_prefer_braces = true:error

#Prefer to use pattern matching constructs, when possible (introduced with C# 9.0)
csharp_style_prefer_pattern_matching = true:warning

#Prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer:true:warning

#Prefer assignments with a ternary conditional over an if-else statement
dotnet_style_prefer_conditional_expression_over_assignment = true

#Prefer return statements to use a ternary conditional over an if-else statement
dotnet_style_prefer_conditional_expression_over_return = true

#Prefer compound assignment expressions
dotnet_style_prefer_compound_assignment = true:warning

#Prefer simplified conditional expressions
dotnet_style_prefer_simplified_boolean_expressions = true:warning

#Prefer to use the ^ operator when calculating an index from the end of a collection
csharp_style_prefer_index_operator = true:warning

#Prefer to use the range operator .. when extracting a "slice" of a collection
csharp_style_prefer_range_operator = true:warning

#Prefer target-typed new expressions when created type is apparent
csharp_style_implicit_object_creation_when_type_is_apparent = true
#endregion CSharp formatting rules


#region rules
# Convert typeof.Name to nameof
dotnet_diagnostic.IDE0082.severity = warning

# IDE0010: Add missing cases in switch statement
dotnet_diagnostic.IDE0010.severity = warning

# CA2234: Pasar objetos URI de sistema en lugar de cadenas
dotnet_diagnostic.CA2234.severity = error

# CA1507: Use nameof para expresar nombres de símbolos
dotnet_diagnostic.CA1507.severity = error

# CA1309: Usar una comparación de cadena ordinal
dotnet_diagnostic.CA1309.severity = warning

# CA1000: No declarar miembros estáticos en tipos genéricos
dotnet_diagnostic.CA1000.severity = error

# CA1003: Usar instancias genéricas del controlador de eventos
dotnet_diagnostic.CA1003.severity = error

# CA1014: Marcar los ensamblados con CLSCompliant
dotnet_diagnostic.CA1014.severity = error

# CA1021: Evitar parámetros out
dotnet_diagnostic.CA1021.severity = warning

# CA1040: Evitar interfaces vacías
dotnet_diagnostic.CA1040.severity = warning

# CA1062: Validar argumentos de métodos públicos
dotnet_diagnostic.CA1062.severity = warning

# CA1063: Implementar IDisposable correctamente
dotnet_diagnostic.CA1063.severity = error

# CA1064: Las excepciones deben ser públicas
dotnet_diagnostic.CA1064.severity = error

# CA1307: Especificar StringComparison para mayor claridad
dotnet_diagnostic.CA1307.severity = suggestion

# CA1310: Especificar StringComparison para mayor corrección
dotnet_diagnostic.CA1310.severity = suggestion

# CA1502: Evite la excesiva complejidad
dotnet_diagnostic.CA1502.severity = warning

# CA1505: Evite código que no se puede mantener
dotnet_diagnostic.CA1505.severity = warning

# CA1506: Evite el acoplamiento excesivo de clases
dotnet_diagnostic.CA1506.severity = warning

# CA1508: Evitar código condicional no alcanzado
dotnet_diagnostic.CA1508.severity = warning

# CA1700: No nombrar valores de enumeración como 'Reserved'
dotnet_diagnostic.CA1700.severity = error

# CA1707: Los identificadores no deben contener caracteres de subrayado
dotnet_diagnostic.CA1707.severity = warning

# CA1712: No utilizar como prefijo el nombre del tipo en valores de la enumeración
dotnet_diagnostic.CA1712.severity = warning

# CA1724: Los nombres de tipo no deben coincidir con los espacios de nombres
dotnet_diagnostic.CA1724.severity = error

# CA1814: Preferir las matrices escalonadas antes que multidimensionales
dotnet_diagnostic.CA1814.severity = warning

# CA1816: Los métodos Dispose deberían llamar a SuppressFinalize
dotnet_diagnostic.CA1816.severity = warning

# CA1827: No usar Count() ni LongCount() si se puede usar Any()
dotnet_diagnostic.CA1827.severity = warning

# CA2007: Puede llamar a ConfigureAwait en la tarea esperada
dotnet_diagnostic.CA2007.severity = error

# CA2011: Evitar la recursividad infinita
dotnet_diagnostic.CA2011.severity = error

# CA2201: No provocar tipos de excepción reservados
dotnet_diagnostic.CA2201.severity = warning

# CA2215: Los métodos Dispose deben llamar al método Dispose de la clase base
dotnet_diagnostic.CA2215.severity = error

# CA2219: No emitir excepciones en cláusulas finally
dotnet_diagnostic.CA2219.severity = error

# CA2245: No asignar una propiedad a sí misma
dotnet_diagnostic.CA2245.severity = warning

# CA2249: Considere la posibilidad de usar "string.Contains" en lugar de "string.IndexOf"
dotnet_diagnostic.CA2249.severity = warning

# CA5394: No usar aleatoriedad no segura
dotnet_diagnostic.CA5394.severity = warning

# CA5399: HttpClients debe habilitar las comprobaciones de la lista de revocación de certificados.
dotnet_diagnostic.CA5399.severity = warning

# VSTHRD100: Evite métodos async void
dotnet_diagnostic.VSTHRD100.severity = warning

# VSTHRD111: Usar ConfigureAwait(bool)
dotnet_diagnostic.VSTHRD111.severity = error

# VSTHRD114: Impedir la devolución de un tipo Task nulo
dotnet_diagnostic.VSTHRD114.severity = error

# VSTHRD200: Use el sufijo "Async" para métodos asincrónicos
dotnet_diagnostic.VSTHRD200.severity = warning

# VSTHRD104: Ofrezca métodos asincrónicos
dotnet_diagnostic.VSTHRD104.severity = warning

# ASYNC0004: Use ConfigureAwait(false) on await expression
dotnet_diagnostic.ASYNC0004.severity = error

# RCS1006: Merge 'else' with nested 'if'.
dotnet_diagnostic.RCS1006.severity = warning

# RCS1007: Add braces.
dotnet_diagnostic.RCS1007.severity = error

# RCS1008: Use explicit type instead of 'var' (when the type is not obvious).
dotnet_diagnostic.RCS1008.severity = warning

# RCS1015: Use nameof operator.
dotnet_diagnostic.RCS1015.severity = warning

# RCS1018: Add accessibility modifiers.
dotnet_diagnostic.RCS1018.severity = warning

# RCS1040: Remove empty 'else' clause.
dotnet_diagnostic.RCS1040.severity = error

# RCS1038: Remove empty statement.
dotnet_diagnostic.RCS1038.severity = error

# RCS1037: Remove trailing white-space.
dotnet_diagnostic.RCS1037.severity = warning

# RCS1043: Remove 'partial' modifier from type with a single part.
dotnet_diagnostic.RCS1043.severity = warning

# RCS1045: Rename private field to camel case with underscore.
dotnet_diagnostic.RCS1045.severity = warning

# RCS1056: Avoid usage of using alias directive.
dotnet_diagnostic.RCS1056.severity = warning

# S100: Methods and properties should be named in PascalCase
dotnet_diagnostic.S100.severity = error

# S1006: Method overrides should not change parameter defaults
dotnet_diagnostic.S1006.severity = warning

# S101: Types should be named in PascalCase
dotnet_diagnostic.S101.severity = error

# S103: Lines should not be too long
dotnet_diagnostic.S103.severity = error

# S104: Files should not have too many lines of code
dotnet_diagnostic.S104.severity = warning

# S1048: Destructors should not throw exceptions
dotnet_diagnostic.S1048.severity = error

# S106: Standard outputs should not be used directly to log anything
dotnet_diagnostic.S106.severity = error

# S1067: Expressions should not be too complex
dotnet_diagnostic.S1067.severity = warning

# S107: Methods should not have too many parameters
dotnet_diagnostic.S107.severity = warning

# S1075: URIs should not be hardcoded
dotnet_diagnostic.S1075.severity = warning

# S108: Nested blocks of code should not be left empty
dotnet_diagnostic.S108.severity = error

# S109: Magic numbers should not be used
dotnet_diagnostic.S109.severity = warning

# S1109: A close curly brace should be located at the beginning of a line
dotnet_diagnostic.S1109.severity = warning

# S1110: Redundant pairs of parentheses should be removed
dotnet_diagnostic.S1110.severity = warning

# S1116: Empty statements should be removed
dotnet_diagnostic.S1116.severity = error

# S1117: Local variables should not shadow class fields
dotnet_diagnostic.S1117.severity = error

# S1118: Utility classes should not have public constructors
dotnet_diagnostic.S1118.severity = error

# S112: General exceptions should never be thrown
dotnet_diagnostic.S112.severity = error

# S1121: Assignments should not be made from within sub-expressions
dotnet_diagnostic.S1121.severity = warning

# S1128: Unused "using" should be removed
dotnet_diagnostic.S1128.severity = warning

# S113: Files should contain an empty newline at the end
dotnet_diagnostic.S113.severity = warning

# S1134: Track uses of "FIXME" tags
dotnet_diagnostic.S1134.severity = warning

# S1135: Track uses of "TODO" tags
dotnet_diagnostic.S1135.severity = warning

# S1144: Unused private types or members should be removed
dotnet_diagnostic.S1144.severity = warning

# S1145: Useless "if(true) {...}" and "if(false){...}" blocks should be removed
dotnet_diagnostic.S1145.severity = warning

# S1163: Exceptions should not be thrown in finally blocks
dotnet_diagnostic.S1163.severity = error

# S1168: Empty arrays and collections should be returned instead of null
dotnet_diagnostic.S1168.severity = error

# S1172: Unused method parameters should be removed
dotnet_diagnostic.S1172.severity = warning

# S1185: Overriding members should do more than simply call the same member in the base class
dotnet_diagnostic.S1185.severity = warning

# S1192: String literals should not be duplicated
dotnet_diagnostic.S1192.severity = error

# S1186: Methods should not be empty
dotnet_diagnostic.S1186.severity = error

# S1200: Classes should not be coupled to too many other classes (Single Responsibility Principle)
dotnet_diagnostic.S1200.severity = warning

# S121: Control structures should use curly braces
dotnet_diagnostic.S121.severity = error

# S1215: "GC.Collect" should not be called
dotnet_diagnostic.S1215.severity = error

# S122: Statements should be on separate lines
dotnet_diagnostic.S122.severity = error

# S1226: Method parameters, caught exceptions and foreach variables' initial values should not be ignored
dotnet_diagnostic.S1226.severity = warning

# S1227: break statements should not be used except for switch cases
dotnet_diagnostic.S1227.severity = warning

# S1244: Floating point numbers should not be tested for equality
dotnet_diagnostic.S1244.severity = warning

# S126: "if ... else if" constructs should end with "else" clauses
dotnet_diagnostic.S126.severity = warning

# S1301: "switch" statements should have at least 3 "case" clauses
dotnet_diagnostic.S1301.severity = warning

# S131: "switch/Select" statements should contain a "default/Case Else" clauses
dotnet_diagnostic.S131.severity = warning

# S138: Functions should not have too many lines of code
dotnet_diagnostic.S138.severity = warning

# S1451: Track lack of copyright and license headers
dotnet_diagnostic.S1451.severity = none

# S1479: "switch" statements should not have too many "case" clauses
dotnet_diagnostic.S1479.severity = warning

# S1481: Unused local variables should be removed
dotnet_diagnostic.S1481.severity = warning

# S1607: Tests should not be ignored
dotnet_diagnostic.S1607.severity = error

# S1643: Strings should not be concatenated using '+' in a loop
dotnet_diagnostic.S1643.severity = error

# S1656: Variables should not be self-assigned
dotnet_diagnostic.S1656.severity = error

# S1659: Multiple variables should not be declared on the same line
dotnet_diagnostic.S1659.severity = warning

# S1694: An abstract class should have both abstract and concrete methods
dotnet_diagnostic.S1694.severity = warning

# S1854: Unused assignments should be removed
dotnet_diagnostic.S1854.severity = error

# S1848: Objects should not be created to be dropped immediately without being used
dotnet_diagnostic.S1848.severity = error

# S1871: Two branches in a conditional structure should not have exactly the same implementation
dotnet_diagnostic.S1871.severity = error

# S2114: Collections should not be passed as arguments to their own methods
dotnet_diagnostic.S2114.severity = error

# S2148: Underscores should be used to make large numbers readable
dotnet_diagnostic.S2148.severity = warning

# S2187: TestCases should contain tests
dotnet_diagnostic.S2187.severity = error

# S2190: Recursion should not be infinite
dotnet_diagnostic.S2190.severity = error

# S1862: Related "if/else if" statements should not have the same condition
dotnet_diagnostic.S1862.severity = error

# S1821: "switch" statements should not be nested
dotnet_diagnostic.S1821.severity = warning

# S2053: Hashes should include an unpredictable salt
dotnet_diagnostic.S2053.severity = warning

# S2225: "ToString()" method should not return null
dotnet_diagnostic.S2225.severity = error

# S2228: Console logging should not be used
dotnet_diagnostic.S2228.severity = warning

# S2234: Parameters should be passed in the correct order
dotnet_diagnostic.S2234.severity = warning

# S2292: Trivial properties should be auto-implemented
dotnet_diagnostic.S2292.severity = warning

# S2306: "async" and "await" should not be used as identifiers
dotnet_diagnostic.S2306.severity = error

# S2302: "nameof" should be used
dotnet_diagnostic.S2302.severity = error

# S2386: Mutable fields should not be "public static"
dotnet_diagnostic.S2386.severity = error

# S2376: Write-only properties should not be used
dotnet_diagnostic.S2376.severity = error

# S2486: Generic exceptions should not be ignored
dotnet_diagnostic.S2486.severity = error

# S2674: The length returned from a stream read should be checked
dotnet_diagnostic.S2674.severity = warning

# S2681: Multiline blocks should be enclosed in curly braces
dotnet_diagnostic.S2681.severity = error

# S2692: "IndexOf" checks should not be for positive numbers
dotnet_diagnostic.S2692.severity = error

# S2699: Tests should include assertions
dotnet_diagnostic.S2699.severity = error

# S2737: "catch" clauses should do more than rethrow
dotnet_diagnostic.S2737.severity = error

# S2757: "=+" should not be used instead of "+="
dotnet_diagnostic.S2757.severity = error

# S2758: The ternary operator should not return the same value regardless of the condition
dotnet_diagnostic.S2758.severity = error

# S2761: Doubled prefix operators "!!" and "~~" should not be used
dotnet_diagnostic.S2761.severity = error

# S2930: "IDisposables" should be disposed
dotnet_diagnostic.S2930.severity = warning

# S2933: Fields that are only assigned in the constructor should be "readonly"
dotnet_diagnostic.S2933.severity = error

# S3010: Static fields should not be updated in constructors
dotnet_diagnostic.S3010.severity = error

# S3168: "async" methods should not return "void"
dotnet_diagnostic.S3168.severity = error

# S3169: Multiple "OrderBy" calls should not be used
dotnet_diagnostic.S3169.severity = warning

# S3216: "ConfigureAwait(false)" should be used
dotnet_diagnostic.S3216.severity = error

# S3234: "GC.SuppressFinalize" should not be invoked for types without destructors
dotnet_diagnostic.S3234.severity = error

# S3247: Duplicate casts should not be made
dotnet_diagnostic.S3247.severity = error

# S3249: Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"
dotnet_diagnostic.S3249.severity = warning

# S3256: "string.IsNullOrEmpty" should be used
dotnet_diagnostic.S3256.severity = error

# S3263: Static fields should appear in the order they must be initialized 
dotnet_diagnostic.S3263.severity = warning

# S3400: Methods should not return constants
dotnet_diagnostic.S3400.severity = warning

# S3441: Redundant property names should be omitted in anonymous classes
dotnet_diagnostic.S3441.severity = warning

# S3456: "string.ToCharArray()" should not be called redundantly
dotnet_diagnostic.S3456.severity = error

# S3457: Composite format strings should be used correctly
dotnet_diagnostic.S3457.severity = error

# S3458: Empty "case" clauses that fall through to the "default" should be omitted
dotnet_diagnostic.S3458.severity = error

# S3717: Track use of "NotImplementedException"
dotnet_diagnostic.S3717.severity = warning

# S3872: Parameter names should not duplicate the names of their methods
dotnet_diagnostic.S3872.severity = warning

# S3880: Finalizers should not be empty
dotnet_diagnostic.S3880.severity = warning

# S3990: Assemblies should be marked as CLS compliant
dotnet_diagnostic.S3990.severity = error

# S3992: Assemblies should explicitly specify COM visibility
dotnet_diagnostic.S3992.severity = error

# S3993: Custom attributes should be marked with "System.AttributeUsageAttribute"
dotnet_diagnostic.S3993.severity = warning

# S3994: URI Parameters should not be strings
dotnet_diagnostic.S3994.severity = warning

# S3995: URI return values should not be strings
dotnet_diagnostic.S3995.severity = warning

# S3996: URI properties should not be strings
dotnet_diagnostic.S3996.severity = warning

# S3998: Threads should not lock on objects with weak identity
dotnet_diagnostic.S3998.severity = error

# S4002: Disposable types should declare finalizers
dotnet_diagnostic.S4002.severity = warning

# S4005: "System.Uri" arguments should be used instead of strings
dotnet_diagnostic.S4005.severity = warning

# RETURN0001: Do not return null
dotnet_diagnostic.RETURN0001.severity = suggestion

# CLASS0001: Seal class
dotnet_diagnostic.CLASS0001.severity = suggestion

# S4462: Calls to "async" methods should not be blocking
dotnet_diagnostic.S4462.severity = warning

# S1905: Redundant casts should not be used
dotnet_diagnostic.S1905.severity = error

# S2326: Unused type parameters should be removed
dotnet_diagnostic.S2326.severity = error

# S3776: Cognitive Complexity of methods should not be too high
dotnet_diagnostic.S3776.severity = warning

# RCS1036: Remove redundant empty line.
dotnet_diagnostic.RCS1036.severity = warning

# RCS1021: Simplify lambda expression.
dotnet_diagnostic.RCS1021.severity = warning
#endregion rules
